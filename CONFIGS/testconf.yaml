config:
    version : 0.5
    comment : 'Test yaml file'
    #homedir : ''
    homedir : '/etc/zabbix/log-parser/'
    hostname: host.local.domain
    zbxhost : zabbix.host.com
    #zbxsrv  : zab01.booxdev.com
    zbxsrv  : 127.0.0.1

    # OpenStack configuration parameters
    ssh_key        : SSH_KEY
    nova_config    : /root/keystonerc_admin
    nova_config    : /root/keystonerc_admin
    instace_id     : '????????-????-????-????-????????????'
    instance_net   : 'net-id=382a3ebe-????-????-????-????????????'

    #instance_name  : test_openstack_compute01
    #instance_name  : test_compute01


commands:
    test1              : 'test'
    always_true        : 'true'
    always_false       : 'false'
    list               : 'ls -l %(folder)s'
    hostname           : 'echo %(hostname)s'
    getversion         : 'echo $LOGNAME %(version)s : %(comment)s'
    list               : 'ls -l %(folder)s'
    hostname           : 'echo %(hostname)s'
    getversion         : 'echo $LOGNAME %(version)s : %(comment)s'
    nova_list          : 'nova list'
    nova_list_grep     : /bin/bash -c "nova list | grep %(instance_name)s"
    vm_not_exists      : /bin/bash -c "! nova list | grep %(instance_name)s"
    vm_is_running      :  '/bin/bash -c "nova list | grep %(instance_name)s | grep Running"'
    vm_is_stopped      : '/bin/bash -c "nova list | grep %(instance_name)s | grep Shutdown"'
    nova_stop_vm       : 'nova stop %(instance_name)s'
    nova_delete_vm     : 'nova delete %(instance_name)s'
    nova_delete_1st_vm : /bin/bash -c "nova delete `nova list | grep %(instance_name)s | head -n1 | awk '{print $2}'`"
    nova_force_delete  : 'nova force-delete %(instance_name)s'
    nova_force_delete_1st : '/bin/bash -c "nova force-delete `nova list | grep %(instance_name)s | head -n1 | cut -d" " -f2`"'
    nova_boot          : 'nova boot --image %(instace_id)s --flavor 2 --availability-zone nova:%(hostname)s --key-name %(ssh_key)s --nic %(instance_net)s "%(instance_name)s"'
    nova_log           : 'nova console-log %(instance_name)s'
    nova_attach_vol    : 'nova volume-attach %(instance_hash)s %(volume_hash)s'
    nova_detach_vol    : 'nova volume-detach %(instance_hash)s %(volume_hash)s'
    env                : 'env'
    output_grep        : /bin/bash -c "echo -e "%(lastOutput)s" | grep %(grep)s"
    output_nogrep      : /bin/bash -c "! echo -e "%(lastOutput)s" | grep %(grep)s"
    cinder_list        : 'cinder list'
    cinder_list_grep   : /bin/bash -c "cinder list | grep '%(volume_name)s'"
    cinder_hash        : /bin/bash -c "cinder list | grep '%(volume_hash)s'"
    cinder_storages    : 'cinder type-list'
    cinder_create      : 'cinder create --volume-type="%(cinder_hash)s" --display-name="%(volume_name)s" 1'
    cinder_delete      : 'cinder delete %(volume_hash)s'

# NEW ONES:
    nova_env          : /bin/bash -c "! [ -z $OS_USERNAME ]"




# List of test commands
test:
  # Parameters specific for that test
  config:
    ignoreerrors    : True
    folder          : './'
    errorlist       :
        - 1ExecCMD.py
        - drwxrwxrwx

  # List of execution lines
  execlist:
  - action  :
       cmd           : always_true
       retry_count   : 5
       retry_sleep   : 3
       ignore_errors : True
    print   :    always
    fallback:    getversion

  - action  :
       cmd           : list
    print   :    always

  - action  :
       cmd           : hostname
    fallback:    always_false

test2:
  config:
     ignoreerrors    : True
     folder          : '/aassa'

  execlist:
  -
   action      :
       cmd           : list
       retry_count   : 3
       retry_sleep   : 2
       print         : False
   print       :  always

  - action  :
       cmd           : always_true
       retry_count   : 5
       retry_sleep   : 3
       ignore_errors : True
    print   :    always
    fallback:    getversion

  - action  :
       cmd           : list
    print   :    always




######################
# Create test VM.
# Verify that it is deployed successfuly
#####################
openstack_vm_create:
  # Parameters specific for that test
  config:
    id              : 10
    ignoreerrors    : False
    hostname        : bxcloudcompute%(id)s
    instance_name   : test_compute%(id)s

  # List of execution lines
  execlist:

  # Check that openstack key is imported (source ~/keystone_TENNANT)
  - action    : 
      cmd        : nova_env
      print      : False
  - echo      :
      message    : 'OpenStack environment is not setup. Please run the "source ~/keystone_X" to set environment'
      when       : onfail

  # Check that VM is not exists
  - action    :
      cmd        : nova_list
      print      : False
  - fallback   : nova_delete_vm
  - grep      :
      - -v
      - patterns       :
               - '%(instance_name)s'
  - print     :   onfail

  # Start VM
  - action    :
      cmd          : nova_boot
      print        : False
  - print     :   onfail
     
  # Check that VM appeared in list of VMs
  - action    :
      cmd          : nova_list
      print        : False
      retry_count  : 5
      retry_sleep  : 2
      failifnot    :
       - '%(instance_name)s'
  - print     :   onfail




######################
# Check that VM is running without any errors
# Verify that it is deployed correctly, in running state and has no errors in log console
#####################
openstack_vm_ok:
  # Parameters specific for that test
  config:
    id              : 10
    ignoreerrors    : False
    hostname        : bxcloudcompute%(id)s
    instance_name   : test_compute%(id)s

  # List of execution lines
  execlist:

  # Check that script has loaded environment variables to run openstack commands
  - action    : 
       cmd        : nova_env
       print      : True
  - echo      :
      message    : 'OpenStack environment is not setup. Please run the "source ~/keystone_X" to set environment'
      when       : onfail

  # Check that VM is deployed
  - action    :
      cmd        : nova_list
      print      : False

  - grep      :
#       - dont_fail
#       - -v
       - patterns       :
               - '%(instance_name)s'
  - print     :   onfail

  # Ensure that VM do not have errors in logs
  - action    :
      cmd        : nova_log
      retry_count   : 10
      retry_sleep   : 10
      print         : False
      failifnot  :
       - ' login:'
      failif:
       - ' ERROR:'
       - 'CRITICAL'
  - print     :   onfail



######################
# Delete existing VM
# Deletes VM. If that fails, tries to do force delete
#####################
openstack_vm_delete:
  # Parameters specific for that test
  config:
    id              : 10
    ignoreerrors    : False
    hostname        : bxcloudcompute%(id)s
    instance_name   : test_compute%(id)s

  # List of execution lines
  execlist:

  # Check that openstack key is imported (source ~/keystone_TENNANT)
  - action    : 
       cmd        : nova_env
       print      : True
  - echo      :
      message    : 'OpenStack environment is not setup. Please run the "source ~/keystone_X" to set environment'
      when       : onfail

  # Check that VM exists
  - action    :
       cmd        : nova_list
       print      : False

  # Check that VM exists
  - grep      :
#       - dont_fail
#       - -v
       - patterns       :
               - '%(instance_name)s'
  - print     :   onfail

  # Execute the delete command
  - action    :
      cmd        : nova_delete_vm
      retry_count   : 10
      retry_sleep   : 2
      print         : False

  # Check that VM disappeared
  - action    :
      cmd        : nova_list
      print      : False
      retry_count   : 10
      retry_sleep   : 3
      failif     :
       - '%(instance_name)s'
      fallback   : nova_force_delete_1st
  - print     :   onfail




######################
# Create a test Volume.
# Verify that it is created successfuly
#####################
openstack_volume_create:
  # Parameters specific for that test
  config:
    id              : 12
    ignoreerrors    : False
    hostname        : bxcloudcompute%(id)s
    cinder_name    : COMPUTE%(id)s 
    cinder_hash    : '????????-????-????-????-????????????'
    volume_name     : test_volume%(id)s

  # List of execution lines
  execlist:

  # Check that openstack key is imported (source ~/keystone_TENNANT)
  - action    : 
      cmd        : nova_env
      print      : True
  - echo      :
      message    : 'OpenStack environment is not setup. Please run the "source ~/keystone_X" to set environment'
      when       : onfail

  # Check that VM is not exists
  - action    :
      cmd        : cinder_list
      print      : False
      #print      : True
  - grep      :
      - -v
      - patterns       :
               - '%(volume_name)s'
  - print     :   onfail

  # Get the storage ID
  - action    :
      cmd        : cinder_storages
      print      : False
  - grep      :
      - patterns       :
        - '%(cinder_name)s'
  - get_variable             :
        - line       : 0
        - delimeters : '|'
        - index      : '0:1'
        - pattern    : '^........-....-....-....-............$'
        - saveas     : 'cinder_hash'
        #- dontfail   : True

  # Create Volume
  - action    :
      cmd          : cinder_create
      print        : False
      #print        : True
  #- print     :   onfail
     
  # Check that VM appeared in list of VMs
  - action    :
      cmd          : cinder_list_grep
      print        : False
      #print        : True
      retry_count  : 5
      retry_sleep  : 3
      failifnot    :
       - '%(volume_name)s'
       - 'available'
  - print     :   onfail
  - echo      :
      message    : 'Check the "https://conf.booxdev.com/pages/viewpage.action?pageId=17105087" how to fix the issue.'
      when       : onfail


######################
# Delete a test Volume.
#    Check that volume is in 'created' state
#    if it is not - fail, and try to force delete it
#####################
openstack_volume_delete:
  # Parameters specific for that test
  config:
    id              : 12
    ignoreerrors    : False
    compute_name    : COMPUTE%(id)s 
    volume_hash     : '????????-????-????-????-????????????'
    volume_name     : test_volume%(id)s

  # List of execution lines
  execlist:

  # Check that openstack key is imported (source ~/keystone_TENNANT)
  - action    : 
      cmd        : nova_env
      print      : True
  - echo      :
      message    : 'OpenStack environment is not setup. Please run the "source ~/keystone_X" to set environment'
      when       : onfail

  # Get the volume ID
  - action    :
      cmd        : cinder_list
      print      : False
  - grep      :
      - patterns       :
        # space after compute name is needed to make sure that exact compute is chosen
        - '%(volume_name)s '
  - get_variable             :
        - line       : 0
        - delimeters : '|'
        - index      : '0:1'
        - pattern    : '^........-....-....-....-............$'
        - saveas     : 'volume_hash'
        #- dontfail   : True

  # Check that VM appeared in list of VMs
  - action    :
      cmd          : cinder_hash
      print        : False
      retry_count  : 5
      retry_sleep  : 3
      failifnot    :
       - '%(volume_name)s'
       - 'available'
  - print     :   onfail
  
  # Delete Volume
  - action    :
      cmd          : cinder_delete
      print        : False
      retry_count  : 5
      retry_sleep  : 3
      failif    :
       - '%(volume_hash)s'
  - print     :   onfail
  - echo      :
      message    : 'Check the "https://help.local/help?pageId=00001" how to fix the issue.'
      when       : onfail
     


######################
# Attach Volume to VM
#    Attach Volume with ID = volID to VM with ID = vmID
#    Both IDs are basing on 'id' parameter
#####################
openstack_volume_attach:
  # Parameters specific for that test
  config:
    id              : 12
    volNAME         : 'COMPUTE%(volID)s'
    volID           : "%(id)s"
    vmID            : "%(id)s"
    ignoreerrors    : False
    instance_name   : test_compute%(vmID)s
    instance_hash   : '????????-????-????-????-????????????'
    volume_hash     : '????????-????-????-????-????????????'
    volume_name     : 'test_volume%(volID)s'

  # List of execution lines
  execlist:

  # Check that openstack key is imported (source ~/keystone_TENNANT)
  - action    : 
      cmd        : nova_env
      print      : True
  - echo      :
      message    : 'OpenStack environment is not setup. Please run the "source ~/keystone_X" to set environment'
      when       : onfail

  # Get the VM ID
  - action    :
      cmd          : nova_list_grep
      print        : False
      retry_count  : 5
      retry_sleep  : 3
      failifnot    :
       - '%(instance_name)s'
       - 'Running'
       - 'ACTIVE'
  - grep      :
      - patterns       :
        - '%(instance_name)s '
  - get_variable             :
        - index      : '0:1'
        - pattern    : '^........-....-....-....-............$'
        - saveas     : 'instance_hash'
  
  # Get the volume ID
  - action    :
      cmd        : cinder_list_grep
      print      : False
      retry_count  : 5
      retry_sleep  : 3
      failifnot    :
       - '%(volume_name)s'
       - 'available'
  - grep      :
      - patterns       :
        - '%(volume_name)s '
  - get_variable             :
        - index      : '0:1'
        - pattern    : '^........-....-....-....-............$'
        - saveas     : 'volume_hash'

  # Attach volume to the VM
  - action    :
      cmd          : nova_attach_vol
      #print        : False
      print        : True
  - print     :   onfail

  # Check that VM appeared in list of VMs
  - action    :
      cmd          : cinder_list_grep
      #print        : False
      print        : True
      retry_count  : 5
      retry_sleep  : 3
      failifnot    :
       - '%(volume_hash)s'
       - '%(instance_hash)s'
       - 'in-use'
  - print     :   onfail


######################
# Detach Volume to VM
#    Detach Volume with ID = id from VM
#####################
openstack_volume_detach:
  # Parameters specific for that test
  config:
    id              : 12
    ignoreerrors    : False
    instance_hash   : '????????-????-????-????-????????????'
    volume_hash     : '????????-????-????-????-????????????'
    volume_name     : test_volume%(id)s

  # List of execution lines
  execlist:

  # Check that openstack key is imported (source ~/keystone_TENNANT)
  - action    : 
      cmd        : nova_env
      print      : True
  - echo      :
      message    : 'OpenStack environment is not setup. Please run the "source ~/keystone_X" to set environment'
      when       : onfail

  # Get the volume ID
  - action    :
      cmd        : cinder_list_grep
      #print      : False
      print      : True
      retry_count  : 5
      retry_sleep  : 3
      failifnot    :
       - '%(volume_name)s'
       - 'in-use'
  - grep      :
      - patterns       :
        - '%(volume_name)s '
  - get_variable             :
        - index      : '0:1'
        - pattern    : '^........-....-....-....-............$'
        - saveas     : 'volume_hash'
  - get_variable             :
        - index      : '6:7'
        - pattern    : '^........-....-....-....-............$'
        - saveas     : 'instance_hash'

  # Detach volume to the VM
  - action    :
      cmd          : nova_detach_vol
      #print        : False
      print        : True
  - print     :   onfail

  - action    :
      cmd        : cinder_list_grep
      print      : False
      retry_count  : 5
      retry_sleep  : 3
      failifnot    :
       - '%(volume_name)s'
       - 'available'
  - print     :   onfail
